{
  // Настройки компилятора TypeScript для клиентской части приложения (React)
  "compilerOptions": {
    // Путь к файлу с кэшем информации о сборке для ускорения последующих компиляций
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    // Целевая версия ECMAScript для компиляции (ES2022 - современный стандарт для браузеров)
    "target": "ES2022",
    // Использование современного синтаксиса define для class fields вместо старого синтаксиса
    "useDefineForClassFields": true,
    // Библиотеки TypeScript: ES2022 + DOM API + DOM Iterable для работы с браузером
    "lib": [
      "ES2022",
      "DOM",
      "DOM.Iterable"
    ],
    // Система модулей для генерируемого кода (ESNext - современные возможности модулей)
    "module": "ESNext",
    // Пропуск проверки типов в файлах деклараций (.d.ts) для ускорения компиляции
    "skipLibCheck": true,
    /* Режим работы с бандлерами (Vite, Webpack и т.д.) */
    // Стратегия разрешения модулей, оптимизированная для бандлеров
    "moduleResolution": "bundler",
    // Разрешение импорта TypeScript файлов с расширениями .ts, .tsx без указания расширения
    "allowImportingTsExtensions": true,
    // Строгий синтаксис модулей: импорты остаются как есть без автоматических преобразований
    "verbatimModuleSyntax": true,
    // Принудительное определение типа модуля для всех файлов
    "moduleDetection": "force",
    // Запрет на генерацию output файлов (только проверка типов, без компиляции - бандлер сам компилирует)
    "noEmit": true,
    // Режим преобразования JSX: react-jsx (новый синтаксис без необходимости импорта React)
    "jsx": "react-jsx",
    /* Настройки линтинга и строгой проверки типов */
    // Включение всех строгих проверок типов TypeScript
    "strict": true,
    // Ошибка при наличии неиспользуемых локальных переменных
    "noUnusedLocals": true,
    // Ошибка при наличии неиспользуемых параметров функций
    "noUnusedParameters": true,
    // Разрешение только такой синтаксической конструкции, которая может быть корректно удалена при компиляции в JS
    "erasableSyntaxOnly": true,
    // Ошибка при отсутствии break в case блоках switch语句 (предотвращение "проваливания")
    "noFallthroughCasesInSwitch": true,
    // Запрет на импорт модулей, которые могут иметь непроверяемые побочные эффекты
    "noUncheckedSideEffectImports": true
  },
  // Массив путей к файлам, которые должны быть включены в компиляцию
  // Включает всю папку src - основную папку с исходным кодом приложения
  "include": [
    "src"
  ]
}
/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл tsconfig.app.json - конфигурация TypeScript для клиентской части React-приложения

2. Комментарий "Настройки компилятора TypeScript..." - объясняет назначение файла
   для основного кода приложения (React компоненты, хуки, утилиты)

3. Комментарий "Путь к файлу с кэшем информации..." - описывает файл для хранения
   кэша сборки, который ускоряет инкрементальные компиляции

4. Комментарий "Целевая версия ECMAScript..." - поясняет версию JavaScript (ES2022),
   в которую компилируется TypeScript код для браузеров

5. Комментарий "Использование современного синтаксиса define..." - описывает
   использование нового стандарта для полей класса вместо устаревшего синтаксиса

6. Комментарий "Библиотеки TypeScript..." - указывает какие стандартные библиотеки
   доступны: ES2022 + DOM API + DOM Iterable для работы с браузером

7. Комментарий "Система модулей для генерируемого кода..." - описывает формат
   модулей ESNext в выходном JavaScript коде

8. Комментарий "Пропуск проверки типов в файлах деклараций..." - объясняет
   оптимизацию для ускорения процесса компиляции при разработке

9. Комментарий "Режим работы с бандлерами..." - раздел настроек, оптимизированных
   для работы со сборщиками like Vite

10. Комментарий "Стратегия разрешения модулей..." - описывает алгоритм поиска
    модулей bundler, специально для современных бандлеров

11. Комментарий "Разрешение импорта TypeScript файлов..." - позволяет импортировать
    .ts/.tsx файлы без указания расширения для удобства разработки

12. Комментарий "Строгий синтаксис модулей..." - обеспечивает точное соответствие
    между импортами в TypeScript и результирующим JavaScript

13. Комментарий "Принудительное определение типа модуля..." - заставляет TypeScript
    рассматривать все файлы как модули ES6

14. Комментарий "Запрет на генерацию output файлов..." - указывает что TypeScript
    только проверяет типы, а компиляцию в JavaScript выполняет бандлер (Vite)

15. Комментарий "Режим преобразования JSX..." - настройка для нового синтаксиса JSX
    (автоматический импорт React функций без явного импорта)

16. Комментарий "Настройки линтинга и строгой проверки типов..." - раздел строгих
    проверок для обеспечения высокого качества кода

17. Комментарий "Включение всех строгих проверок типов..." - активирует все
    strict-настройки TypeScript для максимальной типобезопасности

18. Комментарий "Ошибка при наличии неиспользуемых локальных переменных..." - 
    строгая проверка на чистоту кода и удаление неиспользуемого кода

19. Комментарий "Ошибка при наличии неиспользуемых параметров функций..." - 
    предотвращает создание неиспользуемых параметров в функциях

20. Комментарий "Разрешение только такой синтаксической конструкции..." - 
    обеспечивает корректную компиляцию в чистый JavaScript без лишнего кода

21. Комментарий "Ошибка при отсутствии break в case блоках..." - предотвращает
    случайное "проваливание" через case в switch statements

22. Комментарий "Запрет на импорт модулей..." - защита от непредсказуемых
    побочных эффектов при импорте модулей

23. Комментарий "Массив путей к файлам..." - указывает что все файлы в папке src
    должны обрабатываться данной конфигурацией

ОСОБЕННОСТИ КОНФИГУРАЦИИ:
- Оптимизирована для React приложений с современным синтаксисом JSX
- Нацелена на браузерное окружение с поддержкой DOM API
- Интегрирована с современными бандлерами like Vite
- Строгие настройки для обеспечения качества кода
- Автоматическая обработка JSX без необходимости импорта React
*/