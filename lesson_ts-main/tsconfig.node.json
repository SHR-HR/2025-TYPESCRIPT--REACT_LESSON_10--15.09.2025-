{
  // Настройки компилятора TypeScript для Node.js окружения (сборка и конфигурационные файлы)
  "compilerOptions": {
    // Путь к файлу с кэшем информации о сборке TypeScript для ускорения последующих компиляций
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    // Целевая версия ECMAScript для компиляции (ES2023 - последний стандарт на момент конфигурации)
    "target": "ES2023",
    // Библиотеки TypeScript, которые будут включены в компиляцию (только ES2023)
    "lib": [
      "ES2023"
    ],
    // Система модулей для генерируемого кода (ESNext - самые современные возможности модулей)
    "module": "ESNext",
    // Пропуск проверки типов в файлах деклараций (.d.ts) для ускорения компиляции
    "skipLibCheck": true,
    /* Режим работы с бандлерами (Vite, Webpack и т.д.) */
    // Стратегия разрешения модулей, оптимизированная для бандлеров
    "moduleResolution": "bundler",
    // Разрешение импорта TypeScript файлов с расширениями .ts, .tsx без указания расширения
    "allowImportingTsExtensions": true,
    // Строгий синтаксис модулей: импорты остаются как есть без автоматических преобразований
    "verbatimModuleSyntax": true,
    // Принудительное определение типа модуля для всех файлов
    "moduleDetection": "force",
    // Запрет на генерацию output файлов (только проверка типов, без компиляции)
    "noEmit": true,
    /* Настройки линтинга и строгой проверки типов */
    // Включение всех строгих проверок типов
    "strict": true,
    // Ошибка при наличии неиспользуемых локальных переменных
    "noUnusedLocals": true,
    // Ошибка при наличии неиспользуемых параметров функций
    "noUnusedParameters": true,
    // Разрешение только такой синтаксической конструкции, которая может быть корректно удалена при компиляции в JS
    "erasableSyntaxOnly": true,
    // Ошибка при отсутствии break в case блоках switch语句
    "noFallthroughCasesInSwitch": true,
    // Запрет на импорт модулей, которые могут иметь непроверяемые побочные эффекты
    "noUncheckedSideEffectImports": true
  },
  // Массив путей к файлам, которые должны быть включены в компиляцию
  // В данном случае только vite.config.ts файл
  "include": [
    "vite.config.ts"
  ]
}
/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл tsconfig.node.json - конфигурация TypeScript для Node.js окружения

2. Комментарий "Настройки компилятора TypeScript..." - объясняет назначение файла
   для конфигурационных и сборочных файлов (не для основного кода приложения)

3. Комментарий "Путь к файлу с кэшем информации..." - описывает файл для хранения
   кэша сборки, который ускоряет последующие компиляции

4. Комментарий "Целевая версия ECMAScript..." - поясняет версию JavaScript,
   в которую компилируется TypeScript код

5. Комментарий "Библиотеки TypeScript..." - указывает какие стандартные библиотеки
   TypeScript будут доступны при компиляции

6. Комментарий "Система модулей для генерируемого кода..." - описывает формат
   модулей в выходном JavaScript коде

7. Комментарий "Пропуск проверки типов в файлах деклараций..." - объясняет
   оптимизацию для ускорения процесса компиляции

8. Комментарий "Режим работы с бандлерами..." - раздел настроек, оптимизированных
   для работы со сборщиками like Vite, Webpack

9. Комментарий "Стратегия разрешения модулей..." - описывает алгоритм поиска
   модулей, специально для бандлеров

10. Комментарий "Разрешение импорта TypeScript файлов..." - позволяет импортировать
    .ts/.tsx файлы без указания расширения

11. Комментарий "Строгий синтаксис модулей..." - обеспечивает точное соответствие
    между импортами в TypeScript и результирующим JavaScript

12. Комментарий "Принудительное определение типа модуля..." - заставляет TypeScript
    рассматривать все файлы как модули

13. Комментарий "Запрет на генерацию output файлов..." - указывает что TypeScript
    только проверяет типы, но не генерирует JavaScript файлы

14. Комментарий "Настройки линтинга и строгой проверки типов..." - раздел строгих
    проверок для повышения качества кода

15. Комментарий "Включение всех строгих проверок типов..." - активирует все
    strict-настройки TypeScript

16. Комментарий "Ошибка при наличии неиспользуемых локальных переменных..." - 
    строгая проверка на чистоту кода

17. Комментарий "Ошибка при наличии неиспользуемых параметров функций..." - 
    предотвращает создание неиспользуемых параметров

18. Комментарий "Разрешение только такой синтаксической конструкции..." - 
    обеспечивает корректную компиляцию в чистый JavaScript

19. Комментарий "Ошибка при отсутствии break в case блоках..." - предотвращает
    случайное "проваливание" через case в switch

20. Комментарий "Запрет на импорт модулей..." - защита от побочных эффектов
    при импорте модулей

21. Комментарий "Массив путей к файлам..." - указывает какие файлы должны
    обрабатываться данной конфигурацией

ОСОБЕННОСТИ КОНФИГУРАЦИИ:
- Эта конфигурация предназначена только для файлов сборки и конфигурации
- Основной код приложения использует другую конфигурацию (tsconfig.app.json)
- Настройки оптимизированы для работы с Vite и современными бандлерами
- Строгие проверки обеспечивают высокое качество кода инструментов сборки
*/