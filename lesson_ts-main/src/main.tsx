// Импорт React из пакета 'react' - необходим для использования JSX синтаксиса
import React from "react";
// Импорт ReactDOM из пакета 'react-dom/client' - для рендеринга React приложения в DOM
import ReactDOM from "react-dom/client";
// Импорт компонента Provider из пакета 'react-redux' - для предоставления store всему приложению
import { Provider } from "react-redux";
// Импорт хранилища (store) из локального файла './store/store'
import { store } from "./store/store";
// Импорт корневого компонента приложения из файла './App'
import App from "./App";
// Импорт главного файла стилей SCSS из папки styles
import './styles/index.scss';

// Создание корневого элемента React приложения в DOM элементе с id 'root'
// Использование оператора ! (non-null assertion) для указания что элемент точно существует
ReactDOM.createRoot(document.getElementById("root")!).render(
  // React.StrictMode - компонент для выявления потенциальных проблем в приложении
  // Включает дополнительные проверки и предупреждения только в development режиме
  <React.StrictMode>
    {/* // Provider - компонент react-redux который делает store доступным для всех компонентов
    // store={store} - передача созданного хранилища в Provider */}
    <Provider store={store}>
      {/* // Корневой компонент приложения - точка входа в компонентную структуру */}
      <App />
    </Provider>
  </React.StrictMode>
);

/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл main.tsx - точка входа (entry point) React приложения

2. Комментарий "Импорт React из пакета 'react'..." - объясняет необходимость
   импорта React для работы с JSX синтаксисом (требование до React 17)

3. Комментарий "Импорт ReactDOM из пакета 'react-dom/client'..." - описывает
   современный API рендеринга React приложений (createRoot вместо render)

4. Комментарий "Импорт компонента Provider из пакета 'react-redux'..." - поясняет
   назначение Provider компонента для интеграции Redux с React

5. Комментарий "Импорт хранилища (store) из локального файла..." - указывает на
   импорт созданного Redux хранилища из локального модуля

6. Комментарий "Импорт корневого компонента приложения..." - описывает импорт
   главного компонента приложения который содержит всю структуру

7. Комментарий "Импорт главного файла стилей SCSS..." - поясняет подключение
   глобальных стилей написанных на SCSS (препроцессор CSS)

8. Комментарий "Создание корневого элемента React приложения..." - описывает
   метод createRoot для создания корневого React элемента

9. Комментарий "Использование оператора ! (non-null assertion)..." - объясняет
   TypeScript оператор который гарантирует что элемент не null

10. Комментарий "React.StrictMode - компонент для выявления..." - описывает
    режим строгого соответствия который помогает находить проблемы

11. Комментарий "Provider - компонент react-redux который делает..." - поясняет
    роль Provider в предоставлении store всем компонентам приложения

12. Комментарий "store={store} - передача созданного хранилища..." - описывает
    пропс который передает Redux store в Provider компонент

13. Комментарий "Корневой компонент приложения..." - указывает на основной
    компонент который содержит всю иерархию приложения

ТЕХНИЧЕСКИЕ ДЕТАЛИ:
- ReactDOM.createRoot() - современный API для рендеринга (React 18+)
- document.getElementById("root")! - получение DOM элемента с гарантией его существования
- <React.StrictMode> - работает только в development сборке
- <Provider store={store}> - оборачивает все приложение для доступа к Redux
- SCSS импорт - глобальные стили применяются ко всему приложению

ПОТОК ВЫПОЛНЕНИЯ:
1. Импорт всех необходимых зависимостей
2. Получение DOM элемента #root
3. Создание React корня
4. Рендеринг приложения в StrictMode с Provider
5. Приложение становится доступным в браузере
*/