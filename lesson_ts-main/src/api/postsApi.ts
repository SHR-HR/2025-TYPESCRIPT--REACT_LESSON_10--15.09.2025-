// Импорт библиотеки axios для выполнения HTTP-запросов к серверу
import axios from "axios";
// Импорт типа Post из файла с типами для использования в функциях API
import type { Post } from "../shared/types/Post";

// Определение базового URL для API постов
const API_URL = "http://localhost:8000/api/posts";
// Определение URL для загрузки файлов (изображений)
const UPLOADS_URL = "http://localhost:8000/uploads";
// Определение учетных данных для базовой HTTP-аутентификации
const auth = { username: "admin", password: "123" };

// Функция для разрешения (получения) URL изображения поста
// Принимает объект поста и возвращает строку с URL или undefined если изображения нет
export const resolvePostImage = (p: Post): string | undefined => {
    // Если в посте есть прямая ссылка на изображение (image_url), возвращаем ее
    if (p.image_url) return p.image_url;
    // Если в посте есть имя файла изображения (image_file), формируем полный URL
    if (p.image_file) return `${UPLOADS_URL}/${p.image_file}`;
    // Если изображение отсутствует, возвращаем undefined
    return undefined;
};

// Создание и экспорт объекта postsApi с методами для работы с постами
export const postsApi = {
    // Метод для получения всех постов
    getAll: async (): Promise<Post[]> => {
        // Выполнение GET-запроса к API для получения списка всех постов
        // Использование базовой аутентификации
        const { data } = await axios.get<Post[]>(API_URL, { auth });
        // Возвращение полученных данных
        return data;
    },

    // Метод для создания нового поста с JSON-данными (без файла)
    // Принимает объект с данными поста: заголовок, содержание, автор и опциональная ссылка на изображение
    createJson: async (payload: {
        title: string; content: string; author: string; image_url?: string;
    }): Promise<Post> => {
        // Выполнение POST-запроса к API для создания поста
        // Передача данных поста в теле запроса в формате JSON
        // Использование базовой аутентификации
        const { data } = await axios.post<Post>(API_URL, payload, { auth });
        // Возвращение созданного поста
        return data;
    },

    // Метод для создания нового поста с загрузкой файла изображения
    // Принимает объект с данными поста и файлом изображения
    createWithFile: async (payload: {
        title: string; content: string; author: string; file: File;
    }): Promise<Post> => {
        // Создание объекта FormData для передачи файла и текстовых данных
        const fd = new FormData();
        // Добавление заголовка поста в FormData
        fd.append("title", payload.title);
        // Добавление содержания поста в FormData
        fd.append("content", payload.content);
        // Добавление автора поста в FormData
        fd.append("author", payload.author);
        // Добавление файла изображения в FormData
        fd.append("image_file", payload.file);
        // Выполнение POST-запроса к специальному endpoint /upload для загрузки файла
        // Установка заголовка Content-Type для multipart/form-data
        // Использование базовой аутентификации
        const { data } = await axios.post<Post>(`${API_URL}/upload`, fd, {
            auth, headers: { "Content-Type": "multipart/form-data" }
        });
        // Возвращение созданного поста
        return data;
    },

    // Метод для обновления поста с JSON-данными (без файла)
    // Принимает id поста и частичный объект с обновляемыми полями (исключая id)
    updateJson: async (id: string, patch: Partial<Omit<Post, "id">>): Promise<Post> => {
        // Выполнение PUT-запроса к API для обновления поста
        // URL включает id поста для идентификации
        // Передача обновляемых данных в теле запроса в формате JSON
        // Использование базовой аутентификации
        const { data } = await axios.put<Post>(`${API_URL}/${id}`, patch, { auth });
        // Возвращение обновленного поста
        return data;
    },

    // Метод для обновления изображения поста
    // Принимает id поста и новый файл изображения
    updateFile: async (id: string, file: File): Promise<Post> => {
        // Создание объекта FormData для передачи файла
        const fd = new FormData();
        // Добавление файла изображения в FormData
        fd.append("image_file", file);
        // Выполнение PUT-запроса к специальному endpoint /upload для обновления файла
        // URL включает id поста для идентификации
        // Установка заголовка Content-Type для multipart/form-data
        // Использование базовой аутентификации
        const { data } = await axios.put<Post>(`${API_URL}/${id}/upload`, fd, {
            auth, headers: { "Content-Type": "multipart/form-data" }
        });
        // Возвращение обновленного поста
        return data;
    },

    // Метод для удаления поста
    // Принимает id поста для удаления
    delete: async (id: string): Promise<void> => {
        // Выполнение DELETE-запроса к API для удаления поста
        // URL включает id поста для идентификации
        // Использование базовой аутентификации
        // Не возвращает данных (void)
        await axios.delete(`${API_URL}/${id}`, { auth });
    },
};

/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл postsApi.ts - модуль API для работы с постами

2. Комментарий "Импорт библиотеки axios для выполнения HTTP-запросов к серверу" - 
   объясняет назначение импорта axios - библиотеки для работы с HTTP-запросами

3. Комментарий "Импорт типа Post из файла с типами для использования в функциях API" - 
   описывает импорт TypeScript-типа для типизации данных постов

4. Комментарий "Определение базового URL для API постов" - 
   поясняет создание константы с базовым адресом API endpoint для постов

5. Комментарий "Определение URL для загрузки файлов (изображений)" - 
   объясняет создание константы с адресом для доступа к загруженным файлам

6. Комментарий "Определение учетных данных для базовой HTTP-аутентификации" - 
   объясняет создание объекта с логином и паролем для аутентификации на сервере

7. Комментарий "Функция для разрешения (получения) URL изображения поста" - 
   описывает вспомогательную функцию для получения URL изображения

8. Комментарий "Принимает объект поста и возвращает строку с URL или undefined если изображения нет" - 
   поясняет сигнатуру функции resolvePostImage

9. Комментарий "Если в посте есть прямая ссылка на изображение (image_url), возвращаем ее" - 
   объясняет первую проверку в функции resolvePostImage

10. Комментарий "Если в посте есть имя файла изображения (image_file), формируем полный URL" - 
    объясняет вторую проверку в функции resolvePostImage

11. Комментарий "Если изображение отсутствует, возвращаем undefined" - 
    объясняет возвращаемое значение при отсутствии изображения

12. Комментарий "Создание и экспорт объекта postsApi с методами для работы с постами" - 
    описывает создание объекта с методами CRUD для постов

13. Комментарий "Метод для получения всех постов" - 
    поясняет назначение метода getAll

14. Комментарий "Выполнение GET-запроса к API для получения списка всех постов" - 
    описывает HTTP-запрос на получение данных

15. Комментарий "Метод для создания нового поста с JSON-данными (без файла)" - 
    поясняет назначение метода createJson

16. Комментарий "Принимает объект с данными поста: заголовок, содержание, автор и опциональная ссылка на изображение" - 
    объясняет структуру параметра payload

17. Комментарий "Выполнение POST-запроса к API для создания поста" - 
    описывает HTTP-запрос на создание ресурса

18. Комментарий "Передача данных поста в теле запроса в формате JSON" - 
    поясняет формат передаваемых данных

19. Комментарий "Метод для создания нового поста с загрузкой файла изображения" - 
    поясняет назначение метода createWithFile

20. Комментарий "Принимает объект с данными поста и файлом изображения" - 
    объясняет структуру параметра payload

21. Комментарий "Создание объекта FormData для передачи файла и текстовых данных" - 
    описывает создание FormData для multipart-запроса

22. Комментарий "Добавление заголовка поста в FormData" - 
    поясняет добавление текстового поля в FormData

23. Комментарий "Добавление содержания поста в FormData" - 
    поясняет добавление текстового поля в FormData

24. Комментарий "Добавление автора поста в FormData" - 
    поясняет добавление текстового поля в FormData

25. Комментарий "Добавление файла изображения в FormData" - 
    поясняет добавление файла в FormData

26. Комментарий "Выполнение POST-запроса к специальному endpoint /upload для загрузки файла" - 
    описывает HTTP-запрос на создание поста с файлом

27. Комментарий "Установка заголовка Content-Type для multipart/form-data" - 
    объясняет необходимость установки правильного заголовка для FormData

28. Комментарий "Метод для обновления поста с JSON-данными (без файла)" - 
    поясняет назначение метода updateJson

29. Комментарий "Принимает id поста и частичный объект с обновляемыми полями (исключая id)" - 
    объясняет параметры метода и тип Partial<Omit<Post, "id">>

30. Комментарий "Выполнение PUT-запроса к API для обновления поста" - 
    описывает HTTP-запрос на обновление ресурса

31. Комментарий "URL включает id поста для идентификации" - 
    поясняет формирование URL с идентификатором поста

32. Комментарий "Метод для обновления изображения поста" - 
    поясняет назначение метода updateFile

33. Комментарий "Принимает id поста и новый файл изображения" - 
    объясняет параметры метода

34. Комментарий "Создание объекта FormData для передачи файла" - 
    описывает создание FormData для multipart-запроса

35. Комментарий "Добавление файла изображения в FormData" - 
    поясняет добавление файла в FormData

36. Комментарий "Выполнение PUT-запроса к специальному endpoint /upload для обновления файла" - 
    описывает HTTP-запрос на обновление файла

37. Комментарий "Метод для удаления поста" - 
    поясняет назначение метода delete

38. Комментарий "Принимает id поста для удаления" - 
    объясняет параметр метода

39. Комментарий "Выполнение DELETE-запроса к API для удаления поста" - 
    описывает HTTP-запрос на удаление ресурса

40. Комментарий "Не возвращает данных (void)" - 
    указывает, что метод не возвращает значения

ОСОБЕННОСТИ РЕАЛИЗАЦИИ:

- Поддерживает два способа работы с изображениями: через URL и через загрузку файлов
- Использует FormData для загрузки файлов и multipart/form-data запросов
- Имеет отдельные методы для работы с JSON и файлами
- Вспомогательная функция resolvePostImage унифицирует доступ к изображениям постов
- Все методы используют базовую HTTP-аутентификацию

СТРУКТУРА МОДУЛЯ:

- Константы API_URL, UPLOADS_URL и auth для конфигурации
- Вспомогательная функция resolvePostImage
- Объект postsApi с шестью методами: getAll, createJson, createWithFile, updateJson, updateFile, delete

ИСПОЛЬЗОВАНИЕ:
- Предоставляет полный CRUD функционал для сущности "Пост"
- Поддерживает загрузку и обновление изображений
- Используется в React-компонентах для взаимодействия с сервером
- Обеспечивает типобезопасность при работе с данными постов
- Упрощает работу с изображениями через единую функцию resolvePostImage
*/