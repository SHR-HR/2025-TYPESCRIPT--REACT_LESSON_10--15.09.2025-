// Импорт библиотеки axios для выполнения HTTP-запросов к серверу
import axios from "axios";
// Импорт типов Student и AttendStatus из файла с типами для использования в функциях API
import type { Student, AttendStatus } from "../shared/types/Student";

// Определение базового URL для API студентов
const API_URL = "http://localhost:8000/api/students";
// Определение учетных данных для базовой HTTP-аутентификации
const auth = { username: "admin", password: "123" };

// Создание и экспорт объекта studentsApi с методами для работы со студентами
export const studentsApi = {
    // Метод для получения списка всех студентов
    getStudents: async (): Promise<Student[]> => {
        // Выполнение GET-запроса к API для получения списка студентов
        // Использование базовой аутентификации с указанными учетными данными
        const { data } = await axios.get<Student[]>(API_URL, { auth });
        // Возвращение полученных данных
        return data;
    },

    // Метод для обновления статуса посещаемости студента
    // Принимает id студента и новый статус посещаемости
    updateAttend: async (id: number, attend: AttendStatus): Promise<Student> => {
        // Выполнение PUT-запроса к API для обновления статуса посещаемости
        // URL включает id студента и endpoint /attend
        // Передача объекта с полем attend в теле запроса
        // Использование базовой аутентификации
        const { data } = await axios.put<Student>(`${API_URL}/${id}/attend`, { attend }, { auth });
        // Возвращение обновленного студента
        return data;
    },

    // Метод для обновления оценки студента
    // Принимает id студента и новую оценку
    updateGrade: async (id: number, grade: number): Promise<Student> => {
        // Выполнение PUT-запроса к API для обновления оценки
        // URL включает id студента и endpoint /grade
        // Передача объекта с полем grade в теле запроса
        // Использование базовой аутентификации
        const { data } = await axios.put<Student>(`${API_URL}/${id}/grade`, { grade }, { auth });
        // Возвращение обновленного студента
        return data;
    },

    // Метод для обновления онлайн-статуса студента
    // Принимает id студента и новый онлайн-статус
    updateOnline: async (id: number, online: boolean): Promise<Student> => {
        // Выполнение PUT-запроса к API для обновления онлайн-статуса
        // URL включает id студента и endpoint /online
        // Передача объекта с полем online в теле запроса
        // Использование базовой аутентификации
        const { data } = await axios.put<Student>(`${API_URL}/${id}/online`, { online }, { auth });
        // Возвращение обновленного студента
        return data;
    },
};

/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл studentsApi.ts - модуль API для работы со студентами

2. Комментарий "Импорт библиотеки axios для выполнения HTTP-запросов к серверу" - 
   объясняет назначение импорта axios - библиотеки для работы с HTTP-запросами

3. Комментарий "Импорт типов Student и AttendStatus из файла с типами для использования в функциях API" - 
   описывает импорт TypeScript-типов для типизации данных студентов и статусов посещаемости

4. Комментарий "Определение базового URL для API студентов" - 
   поясняет создание константы с базовым адресом API endpoint для студентов

5. Комментарий "Определение учетных данных для базовой HTTP-аутентификации" - 
   объясняет создание объекта с логином и паролем для аутентификации на сервере

6. Комментарий "Создание и экспорт объекта studentsApi с методами для работы со студентами" - 
   описывает создание объекта с методами для работы со студентами

7. Комментарий "Метод для получения списка всех студентов" - 
   поясняет назначение метода getStudents

8. Комментарий "Выполнение GET-запроса к API для получения списка студентов" - 
   описывает HTTP-запрос на получение данных о студентах

9. Комментарий "Использование базовой аутентификации с указанными учетными данными" - 
   объясняет механизм аутентификации при запросе

10. Комментарий "Возвращение полученных данных" - 
    указывает на возврат данных из метода

11. Комментарий "Метод для обновления статуса посещаемости студента" - 
    поясняет назначение метода updateAttend

12. Комментарий "Принимает id студента и новый статус посещаемости" - 
    объясняет параметры метода - идентификатор студента и статус посещаемости

13. Комментарий "Выполнение PUT-запроса к API для обновления статуса посещаемости" - 
    описывает HTTP-запрос на обновление статуса посещаемости

14. Комментарий "URL включает id студента и endpoint /attend" - 
    поясняет формирование URL с идентификатором студента и специфическим endpoint

15. Комментарий "Передача объекта с полем attend в теле запроса" - 
    объясняет передачу данных в теле PUT-запроса

16. Комментарий "Возвращение обновленного студента" - 
    указывает на возврат данных обновленного студента

17. Комментарий "Метод для обновления оценки студента" - 
    поясняет назначение метода updateGrade

18. Комментарий "Принимает id студента и новую оценку" - 
    объясняет параметры метода - идентификатор студента и числовая оценка

19. Комментарий "Выполнение PUT-запроса к API для обновления оценки" - 
    описывает HTTP-запрос на обновление оценки студента

20. Комментарий "URL включает id студента и endpoint /grade" - 
    поясняет формирование URL с идентификатором студента и специфическим endpoint

21. Комментарий "Передача объекта с полем grade в теле запроса" - 
    объясняет передачу данных в теле PUT-запроса

22. Комментарий "Метод для обновления онлайн-статуса студента" - 
    поясняет назначение метода updateOnline

23. Комментарий "Принимает id студента и новый онлайн-статус" - 
    объясняет параметры метода - идентификатор студента и булевый онлайн-статус

24. Комментарий "Выполнение PUT-запроса к API для обновления онлайн-статуса" - 
    описывает HTTP-запрос на обновление онлайн-статуса студента

25. Комментарий "URL включает id студента и endpoint /online" - 
    поясняет формирование URL с идентификатором студента и специфическим endpoint

26. Комментарий "Передача объекта с полем online в теле запроса" - 
    объясняет передачу данных в теле PUT-запроса

ОСОБЕННОСТИ РЕАЛИЗАЦИИ:

- Использует базовую HTTP-аутентификацию для всех запросов
- Реализует методы для обновления отдельных полей студента (посещаемость, оценка, онлайн-статус)
- Использует TypeScript для строгой типизации входных и выходных данных
- Все методы являются асинхронными (async/await)
- Использует специализированные endpoints для обновления конкретных полей
- Все методы обновления возвращают обновленный объект студента

СТРУКТУРА МОДУЛЯ:

- Константы API_URL и auth для конфигурации
- Объект studentsApi с четырьмя методами: getStudents, updateAttend, updateGrade, updateOnline
- Каждый метод update соответствует определенному аспекту данных студента

ИСПОЛЬЗОВАНИЕ:
- Предоставляет абстракцию для работы с API студентов
- Используется в React-компонентах для взаимодействия с сервером
- Обрабатывает аутентификацию и форматирование запросов
- Обеспечивает типобезопасность при работе с данными студентов
- Позволяет точечно обновлять отдельные поля студентов без передачи всего объекта
*/