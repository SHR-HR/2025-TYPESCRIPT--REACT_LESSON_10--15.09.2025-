// Импорт библиотеки axios для выполнения HTTP-запросов
import axios from "axios";
// Импорт типа User из файла с типами для использования в функциях API
import type { User } from "../shared/types/User";

// Определение базового URL для API пользователей
const API_URL = "http://localhost:8000/api/users";
// Определение учетных данных для базовой HTTP-аутентификации
const auth = { username: "admin", password: "123" };

// Создание и экспорт объекта usersApi с методами для работы с пользователями
export const usersApi = {
    // Метод для получения списка всех пользователей
    getUsers: async (): Promise<User[]> => {
        // Выполнение GET-запроса к API для получения списка пользователей
        // Использование базовой аутентификации с указанными учетными данными
        const { data } = await axios.get<User[]>(API_URL, { auth });
        // Возвращение полученных данных
        return data;
    },

    // Метод для добавления нового пользователя
    // Принимает данные пользователя без поля id (Omit<User, 'id'>)
    addUser: async (userData: Omit<User, 'id'>): Promise<User> => {
        // Выполнение POST-запроса к API для создания нового пользователя
        // Передача данных пользователя в теле запроса
        // Использование базовой аутентификации
        const { data } = await axios.post<User>(API_URL, userData, { auth });
        // Возвращение созданного пользователя (с включенным id от сервера)
        return data;
    },

    // Метод для обновления существующего пользователя
    // Принимает объект пользователя с полем id
    updateUser: async (user: User): Promise<User> => {
        // Выполнение PUT-запроса к API для обновления пользователя
        // URL включает id пользователя для идентификации
        // Передача полного объекта пользователя в теле запроса
        // Использование базовой аутентификации
        const { data } = await axios.put<User>(`${API_URL}/${user.id}`, user, { auth });
        // Возвращение обновленного пользователя
        return data;
    },

    // Метод для удаления пользователя по его id
    // Принимает id пользователя для удаления
    deleteUser: async (userId: number): Promise<void> => {
        // Выполнение DELETE-запроса к API для удаления пользователя
        // URL включает id пользователя для идентификации
        // Использование базовой аутентификации
        // Не возвращает данных (void)
        await axios.delete(`${API_URL}/${userId}`, { auth });
    }
};

/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл usersApi.ts - модуль API для работы с пользователями

2. Комментарий "Импорт библиотеки axios для выполнения HTTP-запросов" - 
   объясняет назначение импорта axios - библиотеки для работы с HTTP-запросами

3. Комментарий "Импорт типа User из файла с типами для использования в функциях API" - 
   описывает импорт TypeScript-типа для типизации данных пользователя

4. Комментарий "Определение базового URL для API пользователей" - 
   поясняет создание константы с базовым адресом API endpoint для пользователей

5. Комментарий "Определение учетных данных для базовой HTTP-аутентификации" - 
   объясняет создание объекта с логином и паролем для аутентификации на сервере

6. Комментарий "Создание и экспорт объекта usersApi с методами для работы с пользователями" - 
   описывает создание объекта с методами CRUD (Create, Read, Update, Delete) для пользователей

7. Комментарий "Метод для получения списка всех пользователей" - 
   поясняет назначение метода getUsers

8. Комментарий "Выполнение GET-запроса к API для получения списка пользователей" - 
   описывает HTTP-запрос на получение данных

9. Комментарий "Использование базовой аутентификации с указанными учетными данными" - 
   объясняет механизм аутентификации при запросе

10. Комментарий "Возвращение полученных данных" - 
    указывает на возврат данных из метода

11. Комментарий "Метод для добавления нового пользователя" - 
    поясняет назначение метода addUser

12. Комментарий "Принимает данные пользователя без поля id (Omit<User, 'id'>)" - 
    объясняет TypeScript-тип Omit, который исключает поле id из типа User

13. Комментарий "Выполнение POST-запроса к API для создания нового пользователя" - 
    описывает HTTP-запрос на создание нового ресурса

14. Комментарий "Передача данных пользователя в теле запроса" - 
    поясняет передачу данных в POST-запросе

15. Комментарий "Возвращение созданного пользователя (с включенным id от сервера)" - 
    указывает на возврат данных созданного пользователя

16. Комментарий "Метод для обновления существующего пользователя" - 
    поясняет назначение метода updateUser

17. Комментарий "Принимает объект пользователя с полем id" - 
    объясняет, что метод принимает полный объект пользователя с идентификатором

18. Комментарий "Выполнение PUT-запроса к API для обновления пользователя" - 
    описывает HTTP-запрос на полное обновление ресурса

19. Комментарий "URL включает id пользователя для идентификации" - 
    поясняет формирование URL с идентификатором пользователя

20. Комментарий "Передача полного объекта пользователя в теле запроса" - 
    объясняет передачу всех данных пользователя в запросе

21. Комментарий "Возвращение обновленного пользователя" - 
    указывает на возврат данных после обновления

22. Комментарий "Метод для удаления пользователя по его id" - 
    поясняет назначение метода deleteUser

23. Комментарий "Принимает id пользователя для удаления" - 
    объясняет параметр метода - идентификатор пользователя

24. Комментарий "Выполнение DELETE-запроса к API для удаления пользователя" - 
    описывает HTTP-запрос на удаление ресурса

25. Комментарий "URL включает id пользователя для идентификации" - 
    поясняет формирование URL с идентификатором для удаления

26. Комментарий "Не возвращает данных (void)" - 
    указывает, что метод не возвращает значения

ОСОБЕННОСТИ РЕАЛИЗАЦИИ:

- Использует базовую HTTP-аутентификацию для всех запросов
- Реализует полный CRUD функционал для сущности "Пользователь"
- Использует TypeScript для строгой типизации входных и выходных данных
- Все методы являются асинхронными (async/await)
- Использует axios для обработки HTTP-запросов и ответов

СТРУКТУРА МОДУЛЯ:

- Константы API_URL и auth для конфигурации
- Объект usersApi с четырьмя методами: getUsers, addUser, updateUser, deleteUser
- Каждый метод соответствует определенному HTTP-методу (GET, POST, PUT, DELETE)

ИСПОЛЬЗОВАНИЕ:
- Предоставляет абстракцию для работы с API пользователей
- Используется в React-компонентах для взаимодействия с сервером
- Обрабатывает аутентификацию и форматирование запросов
- Обеспечивает типобезопасность при работе с данными пользователей
*/