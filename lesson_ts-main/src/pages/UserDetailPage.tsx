// Импорт необходимых модулей и компонентов React
import React, { useEffect, useMemo, useState } from "react";
// Импорт хуков маршрутизации для работы с параметрами URL и навигацией
import { useParams, useNavigate, Link } from "react-router-dom";
// Импорт главного layout компонента для структуры страницы
import MainLayoute from "../layouts/MainLayoute";
// Импорт хуков Redux для работы с состоянием
import { useDispatch, useSelector } from "react-redux";
// Импорт селекторов и действий для работы с пользователями
import {
    selectUserById,        // селектор для получения пользователя по ID
    fetchUsers,            // действие для загрузки пользователей
    updateUser as updateUserThunk,  // действие для обновления пользователя (переименовано для избежания конфликта)
    deleteUser as deleteUserThunk,  // действие для удаления пользователя (переименовано)
    selectUsersLoading,    // селектор для получения статуса загрузки
    selectUsersError,      // селектор для получения ошибок
    clearError,            // действие для очистки ошибок
} from "../store/slices/usersSlice";
// Импорт типов AppDispatch и RootState для типизации
import type { AppDispatch } from "../store/store";
import type { RootState } from "../store/store";

// Определение функционального компонента UserDetailPage с типизацией React.FC
const UserDetailPage: React.FC = () => {
    // Получение параметра id из URL
    const { id } = useParams<{ id: string }>();
    // Преобразование строкового id в число
    const userId = Number(id);
    // Инициализация dispatch с типом AppDispatch для работы с Redux
    const dispatch = useDispatch<AppDispatch>();
    // Получение статуса загрузки через селектор
    const loading = useSelector(selectUsersLoading);
    // Получение ошибки через селектор
    const error = useSelector(selectUsersError);
    // Получение пользователя по ID через селектор с передачей состояния и userId
    const user = useSelector((state: RootState) => selectUserById(state, userId));
    // Инициализация навигации для программой перехода между страницами
    const navigate = useNavigate();

    // Эффект для загрузки пользователей если текущий пользователь не найден
    useEffect(() => {
        if (!user) dispatch(fetchUsers());
    }, [dispatch, user]); // Зависимости: dispatch и user

    // Локальное состояние для имени пользователя с инициализацией из user или пустой строки
    const [name, setName] = useState(user?.name ?? "");
    // Локальное состояние для email пользователя с инициализацией из user или пустой строки
    const [email, setEmail] = useState(user?.email ?? "");

    // Эффект для обновления локального состояния при изменении пользователя
    useEffect(() => {
        if (user) {
            setName(user.name);
            setEmail(user.email);
        }
    }, [user]); // Зависимость: user

    // Мемоизированное значение для проверки изменений в форме
    const formChanged = useMemo(
        // Проверка что пользователь существует и поля изменились
        () => !!user && (name.trim() !== user.name || email.trim() !== user.email),
        [user, name, email] // Зависимости: user, name, email
    );

    // Условный рендеринг если пользователь не найден и не идет загрузка
    if (!user && !loading) {
        return (
            <MainLayoute>
                <div className="container">
                    <h1 className="page-title">Пользователь не найден</h1>
                    {/* Ссылка для возврата к списку пользователей */}
                    <Link className="btn" to="/users">К списку пользователей</Link>
                </div>
            </MainLayoute>
        );
    }

    // Обработчик сохранения изменений пользователя
    const handleSave = async () => {
        if (!user) return; // Защита от вызова если пользователь не существует
        try {
            // Диспатч действия обновления пользователя с обработкой через unwrap()
            await dispatch(updateUserThunk({
                id: user.id,
                name: name.trim(),
                email: email.trim()
            })).unwrap();
            // Перенаправление на страницу списка пользователей после успешного сохранения
            navigate("/users");
        } catch {
            // Обработка ошибки (пустой блок, ошибка обрабатывается в состоянии error)
        }
    };

    // Обработчик удаления пользователя
    const handleDelete = async () => {
        if (!user) return; // Защита от вызова если пользователь не существует
        // Подтверждение удаления через диалоговое окно
        if (window.confirm("Удалить пользователя?")) {
            try {
                // Диспатч действия удаления пользователя
                await dispatch(deleteUserThunk(user.id)).unwrap();
                // Перенаправление на страницу списка пользователей после удаления
                navigate("/users");
            } catch {
                // Обработка ошибки
            }
        }
    };

    // Возвращаем JSX разметку компонента
    return (
        <MainLayoute>
            <div className="container" style={{ maxWidth: 600, display: "grid", gap: 12 }}>
                <h1 className="page-title">Профиль пользователя</h1>

                {/* Блок отображения ошибки */}
                {error && (
                    <p className="error">
                        Ошибка: {error}
                        {/* Кнопка очистки ошибки */}
                        <button className="btn btn--ghost" onClick={() => dispatch(clearError())}>
                            очистить
                        </button>
                    </p>
                )}

                {/* Поле ввода имени пользователя */}
                <label>
                    Имя
                    <input
                        className="input"
                        type="text"
                        value={name}
                        disabled={loading}
                        onChange={(e) => setName(e.target.value)}
                    />
                </label>

                {/* Поле ввода email пользователя */}
                <label>
                    Email
                    <input
                        className="input"
                        type="email"
                        value={email}
                        disabled={loading}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                </label>

                {/* Блок кнопок действий */}
                <div style={{ marginTop: 12, display: "flex", gap: 8, flexWrap: "wrap" }}>
                    {/* Кнопка возврата на предыдущую страницу */}
                    <button className="btn" onClick={() => navigate(-1)}>Назад</button>
                    {/* Ссылка на страницу списка пользователей */}
                    <Link className="btn" to="/users">К списку</Link>
                    {/* Кнопка сохранения изменений (активна только при изменениях) */}
                    <button
                        className="btn btn--primary"
                        onClick={handleSave}
                        disabled={loading || !formChanged}
                    >
                        {loading ? "Сохранение..." : "Сохранить"}
                    </button>
                    {/* Кнопка удаления пользователя */}
                    <button className="btn" onClick={handleDelete} disabled={loading}>
                        Удалить
                    </button>
                </div>
            </div>
        </MainLayoute>
    );
};

// Экспорт компонента по умолчанию
export default UserDetailPage;

/*
===========================================
ПОЯСНЕНИЯ К КОММЕНТАРИЯМ В ДАННОМ ФАЙЛЕ:
===========================================

1. Файл UserDetailPage.tsx - React компонент страницы детальной информации о пользователе

2. Комментарий "Импорт необходимых модулей и компонентов React" - описывает
   базовые импорты React и его хуков (useEffect, useMemo, useState)

3. Комментарий "Импорт хуков маршрутизации для работы с параметрами URL..." - объясняет
   использование useParams, useNavigate и Link из react-router-dom

4. Комментарий "Импорт главного layout компонента..." - поясняет
   использование компонента макета страницы

5. Комментарий "Импорт хуков Redux для работы с состоянием" - описывает
   использование useDispatch и useSelector для управления состоянием

6. Комментарий "Импорт селекторов и действий для работы с пользователями" - перечисляет
   все импортируемые селекторы и действия из usersSlice

7. Комментарий "Импорт типов AppDispatch и RootState для типизации" - объясняет
   необходимость типизации для TypeScript

8. Комментарий "Получение параметра id из URL" - описывает
   использование useParams для получения параметра маршрута

9. Комментарий "Преобразование строкового id в число" - поясняет
   необходимость преобразования типа для дальнейшего использования

10. Комментарий "Получение пользователя по ID через селектор..." - описывает
    использование селектора selectUserById с передачей состояния и ID

11. Комментарий "Локальное состояние для имени пользователя..." - объясняет
    использование useState для управления состоянием формы

12. Комментарий "Эффект для загрузки пользователей если текущий пользователь не найден" - описывает
    логику загрузки данных при отсутствии пользователя в store

13. Комментарий "Мемоизированное значение для проверки изменений в форме" - поясняет
    использование useMemo для оптимизации проверки изменений

14. Комментарий "Условный рендеринг если пользователь не найден и не идет загрузка" - описывает
    отображение сообщения об отсутствии пользователя

15. Комментарий "Обработчик сохранения изменений пользователя" - объясняет
    логику функции handleSave

16. Комментарий "Обработчик удаления пользователя" - описывает
    логику функции handleDelete

17. Комментарий "Блок отображения ошибки" - поясняет
    условный рендеринг блока с ошибкой

18. Комментарий "Поле ввода имени пользователя" - описывает
    элемент формы для редактирования имени

19. Комментарий "Блок кнопок действий" - объясняет
    группу кнопок для различных действий на странице

ОСОБЕННОСТИ РЕАЛИЗАЦИИ:

- Использование useParams для получения ID из URL
- Преобразование строкового ID в числовой формат
- Условная загрузка данных если пользователь не найден в store
- Локальное состояние формы для редактирования
- Проверка изменений формы через useMemo
- Подтверждение удаления через window.confirm
- Программная навигация с помощью useNavigate

СТРУКТУРА КОМПОНЕНТА:

- Заголовок страницы с названием
- Блок отображения ошибок
- Форма редактирования данных пользователя
- Группа кнопок действий (назад, к списку, сохранить, удалить)
- Условный рендеринг для случая ненайденного пользователя

ИСПОЛЬЗОВАНИЕ:
- Страница просмотра и редактирования данных конкретного пользователя
- Интеграция с Redux store для управления состоянием пользователей
- Валидация изменений перед сохранением
- Обработка различных состояний (загрузка, ошибка, отсутствие пользователя)
*/